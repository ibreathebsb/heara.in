{"data":{"site":{"siteMetadata":{"title":"Heara.in","author":"Isaac Young"}},"markdownRemark":{"id":"186f4926-9c95-5187-b494-6e06237c289a","html":"<p>在ES5的时代，如果我们要实现一个类, 例如<code class=\"language-text\">Dog</code>,通常的写法是这样子的：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">Dog</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n<span class=\"token punctuation\">}</span>\n\nDog<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">bark</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">':汪汪汪'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> dog <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">(</span><span class=\"token string\">'苟'</span><span class=\"token punctuation\">)</span>\n\ndog<span class=\"token punctuation\">.</span><span class=\"token function\">bark</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// '汪汪汪'</span></code></pre></div>\n<p>我们之所以这样写，是因为对象的实例能通过<code class=\"language-text\">[[Prototype]]</code>原型链访问到构造函数原型上的方法，其实现通常是这样的</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// __proto__是一个非标准属性，不同浏览器实现不同</span>\n<span class=\"token comment\">// __proto__ 是Dog实例化后的对象dog上的属性，dog就是通过它在原型链上查找bark方法的</span>\n\ndog<span class=\"token punctuation\">.</span>__proto__ <span class=\"token operator\">===</span> Dog<span class=\"token punctuation\">.</span>prototype</code></pre></div>\n<blockquote>\n<p><code class=\"language-text\">__proto__</code>存在于实例上，<code class=\"language-text\">prototype</code>存在于函数上</p>\n</blockquote>\n<p>以上都是废话，相信有一定经验的前端工作者都很清楚，那么ES6中的<code class=\"language-text\">class</code>和这些有什么关系？</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span> <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">bark</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">:汪汪汪`</span></span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> dog <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">(</span><span class=\"token string\">'苟'</span><span class=\"token punctuation\">)</span>\n\ndog<span class=\"token punctuation\">.</span><span class=\"token function\">bark</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>嗯… 好像没啥特别的啊…</p>\n<p>在控制台输入Dog，enter，看看<code class=\"language-text\">Dog</code>是个什么玩意</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">Dog\n\n<span class=\"token comment\">// 输出</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span> <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">bark</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">:汪汪汪`</span></span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这什么也看不出来啊… 继续输入</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">Dog<span class=\"token punctuation\">.</span>__proto__\n<span class=\"token comment\">// 输出</span>\n<span class=\"token function\">ƒ</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>native code<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span>\n\nDog<span class=\"token punctuation\">.</span>prototype\n<span class=\"token comment\">// 输出</span>\n<span class=\"token punctuation\">{</span>\n  constructor<span class=\"token punctuation\">:</span> ƒ\n  bark<span class=\"token punctuation\">:</span> <span class=\"token function\">bark</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  constructor<span class=\"token punctuation\">:</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span>\n  __proto__<span class=\"token punctuation\">:</span> Object\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这里就很有趣了，注意class既有<code class=\"language-text\">prototype</code>也有 <code class=\"language-text\">__proto__</code> 这是为啥？这里就需要说一说<code class=\"language-text\">静态方法</code> 和 <code class=\"language-text\">静态属性</code>了</p>\n<p>考虑ES5的写法</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">Dog</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n<span class=\"token punctuation\">}</span>\nDog<span class=\"token punctuation\">.</span>type <span class=\"token operator\">=</span> <span class=\"token string\">'Dog'</span>\nDog<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">show</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'show'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\nDog<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">bark</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">':汪汪汪'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\nDog<span class=\"token punctuation\">.</span>type\n<span class=\"token comment\">// Dog</span>\nDog<span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 'show'</span>\nDog<span class=\"token punctuation\">.</span><span class=\"token function\">bark</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// Uncaught TypeError: Dog.bark is not a function</span></code></pre></div>\n<p>所谓静态方法和属性就是我们通过类(Dog)直接访问的方法和属性，这些方法和属性是无法通过实例直接访问到的。\n说了这么多你可能想问这和上面说的class的<code class=\"language-text\">prototype</code>、 <code class=\"language-text\">__proto__</code> 有啥关系？问的好</p>\n<p><code class=\"language-text\">prototype</code>其实和<code class=\"language-text\">function.prototype</code>的作用是一致的，即：</p>\n<blockquote>\n<p>为了实例能够访问到在class中定义的方法</p>\n</blockquote>\n<p><code class=\"language-text\">__proto__</code> 则是为了实现类的继承，即：</p>\n<blockquote>\n<p>子类能够访问父类的静态方法和属性</p>\n</blockquote>\n<p>考虑以下代码：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">  <span class=\"token keyword\">class</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">static</span> <span class=\"token function\">show</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'show'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">move</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'move'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">class</span> <span class=\"token class-name\">Bird</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Animal</span><span class=\"token punctuation\">{</span>\n\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> b <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Bird</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  Bird<span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// show</span>\n  b<span class=\"token punctuation\">.</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// move</span></code></pre></div>\n<p><code class=\"language-text\">class Bird extends Animal {}</code>背后的真实实现,其实是这样子的</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Bird</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">setPrototypeOf</span><span class=\"token punctuation\">(</span>Bird<span class=\"token punctuation\">,</span> Animal<span class=\"token punctuation\">)</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">setPrototypeOf</span><span class=\"token punctuation\">(</span>Bird<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">,</span> Animal<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span></code></pre></div>\n<p>以上个人理解，如有谬误，烦请指正</p>","timeToRead":1,"frontmatter":{"title":"Javascript中的prototype、class以及__proto__","date":"December 02, 2018","spoiler":"谈一谈Javascript中的prototype、class以及__proto__的关系"},"fields":{"slug":"/prototype-class-and-proto-in-javascript/"}}},"pageContext":{"slug":"/prototype-class-and-proto-in-javascript/","previous":{"fields":{"slug":"/three-mode-of-splitchunks-in-webpack4/","directoryName":"three-mode-of-splitchunks-in-webpack4"},"frontmatter":{"title":"理解webpack4中splitChunks的3种模式"}},"next":null}}